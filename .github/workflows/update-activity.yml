name: Update GitHub Activity

on:
  schedule:
    - cron: "0 */6 * * *"  # Run every 6 hours
  workflow_dispatch:  # Allow manual runs
  push:
    branches:
      - main  # Change this to your default branch if different
    paths-ignore:
      - 'README.md'  # Prevent triggering on README updates to avoid loops

jobs:
  update-activity:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Fetch GitHub activity
        run: |
          echo "Fetching activity for CloveTwilight3..."
          curl -s https://api.github.com/users/clovetwilight3/events?per_page=15 > activities.json
      
      - name: Process activity and update README
        run: |
          # Create a simple script to process the JSON and update README
          cat > process.js << 'EOF'
          const fs = require('fs');
          const activities = JSON.parse(fs.readFileSync('activities.json', 'utf8'));
          
          // Priority repositories
          const priorityRepos = ['RoomMates-Helper', 'plural-web', 'spotify-player'];
          
          // Repositories to ignore
          const ignoreRepos = ['github-activity-tracker', 'clovetwilight3'];
          
          // Filter out ignored repositories and format activities
          const formattedActivities = activities
            .filter(event => {
              const repo = event.repo.name.split('/')[1];
              return !ignoreRepos.includes(repo);
            })
            .map(event => {
              const repo = event.repo.name.split('/')[1];
              const date = new Date(event.created_at).toLocaleString();
              
              switch (event.type) {
                case 'PushEvent':
                  return `📊 Pushed ${event.payload.commits?.length || '0'} commit(s) to \`${repo}\` - ${date}`;
                case 'IssuesEvent':
                  return `${event.payload.action === 'opened' ? '❗️' : '✅'} ${event.payload.action} issue #${event.payload.issue.number} in \`${repo}\` - ${date}`;
                case 'PullRequestEvent':
                  return `${event.payload.action === 'opened' ? '💪' : '🔄'} ${event.payload.action} PR #${event.payload.pull_request.number} in \`${repo}\` - ${date}`;
                case 'CreateEvent':
                  return `🌱 Created ${event.payload.ref_type} \`${event.payload.ref || ''}\` in \`${repo}\` - ${date}`;
                case 'ReleaseEvent':
                  return `🚀 Released version ${event.payload.release.tag_name} of \`${repo}\` - ${date}`;
                case 'WatchEvent':
                  return `⭐ Starred \`${repo}\` - ${date}`;
                case 'ForkEvent':
                  return `🍴 Forked \`${repo}\` - ${date}`;
                default:
                  return `🔧 Activity in \`${repo}\` - ${date}`;
              }
            });
          
          // Sort activities to prioritize certain repositories
          formattedActivities.sort((a, b) => {
            const aIsPriority = priorityRepos.some(repo => a.includes(repo));
            const bIsPriority = priorityRepos.some(repo => b.includes(repo));
            
            if (aIsPriority && !bIsPriority) return -1;
            if (!aIsPriority && bIsPriority) return 1;
            return 0;
          });
          
          // Take the top 5 activities
          const topActivities = formattedActivities.slice(0, 5);
          
          // Create the markdown
          const timestamp = new Date().toLocaleString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric', 
            hour: 'numeric', 
            minute: 'numeric'
          });
          
          // Handle case where there might be no activities after filtering
          let activityMarkdown = '';
          
          if (topActivities.length > 0) {
            activityMarkdown = topActivities.map(activity => `1. ${activity}`).join('\n');
          } else {
            activityMarkdown = "_No recent activity in tracked repositories_";
          }
          
          const updatedSection = `<!--ACTIVITY:START-->\n${activityMarkdown}\n\n*Last Updated: ${timestamp}*\n<!--ACTIVITY:END-->`;
          
          // Read README and update it
          const readmePath = './README.md';
          let readme = fs.readFileSync(readmePath, 'utf8');
          
          readme = readme.replace(
            /<!--ACTIVITY:START-->[\s\S]*<!--ACTIVITY:END-->/,
            updatedSection
          );
          
          fs.writeFileSync(readmePath, readme, 'utf8');
          console.log('✅ Successfully updated README with recent activities');
          EOF
          
          # Run the script
          node process.js
      
      - name: Commit changes
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add README.md
          git diff --staged --quiet || git commit -m "📊 Update GitHub activity"
          git push
